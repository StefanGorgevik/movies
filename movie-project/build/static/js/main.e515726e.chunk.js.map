{"version":3,"sources":["components/Input/Input.js","redux/actions/actions.js","components/MovieTitle/MovieTitle.js","components/MovieInfo/MovieInfo.js","components/MovieImage/MovieImage.js","components/LeftSide/LeftSide.js","components/RightSideHeader/Header.js","components/Plot/Plot.js","components/Cast/Cast.js","components/TechnicalSpecs/TechnicalSpecs.js","components/RightSide/RightSide.js","containers/Content/Content.js","containers/MainLayout/MainLayout.js","App.js","serviceWorker.js","redux/reducers/reducer.js","redux/store.js","index.js"],"names":["Input","props","handleInputValue","event","setState","movie","target","value","getMovieHandler","e","preventDefault","axios","get","state","then","res","console","log","data","title","year","rating","plot","movieFound","isMovieLoaded","getMovie","catch","err","className","onSubmit","this","htmlFor","onChange","type","id","isMovieFound","React","Component","connect","isLoaded","dispatch","payload","bool","length","rating_votes","MovieImage","src","image","alt","link","trailer","poster","href","rel","Header","plotClicked","categorySelected","castClicked","specsClicked","category","onClick","cat","Plot","Cast","actors","cast","map","actor","i","key","character","TechnicalSpecs","item","tech","specs","push","technical_specs","render","Content","MainLayout","App","Boolean","window","location","hostname","match","initState","reducer","action","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e515726e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Input.css'\r\nimport { connect } from 'react-redux'\r\nimport { getMovie, isMovieLoaded, movieFound } from '../../redux/actions/actions'\r\nimport axios from 'axios'\r\n\r\n\r\nclass Input extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            movie: ''\r\n        }\r\n    }\r\n\r\n    handleInputValue = (event) => {\r\n        this.setState({ movie: event.target.value })\r\n    }\r\n\r\n    getMovieHandler = (e) => {\r\n        e.preventDefault()\r\n        axios.get(`https://imdb-internet-movie-database-unofficial.p.rapidapi.com/film/${this.state.movie}`, {\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"imdb-internet-movie-database-unofficial.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"3ab89774b6msh33d6490b015b7dep1c80cfjsn6aa664875138\"\r\n            }\r\n        })\r\n            .then(res => {\r\n                console.log(res.data)\r\n                var movie = res.data\r\n                if (movie.title === '' && movie.year === '' && movie.rating === '' && movie.plot === '') {\r\n                    console.log('entered1')\r\n                    this.props.movieFound(false)\r\n                    this.props.isMovieLoaded(false)\r\n                } else {\r\n                    console.log('entered2')\r\n\r\n                    this.props.getMovie(res.data)\r\n                    this.props.isMovieLoaded(true)\r\n                    this.props.movieFound(true)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log('entered3')\r\n\r\n                this.props.isMovieLoaded(false)\r\n                this.props.movieFound(false)\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <form className=\"input-form\" onSubmit={this.getMovieHandler}>\r\n                <label htmlFor='movie'>Search for a movie</label>\r\n                <input onChange={this.handleInputValue} type=\"text\" id='movie' />\r\n                <button type=\"submit\">Get Movie</button>\r\n            </form>\r\n            {!this.props.isMovieFound ? <h1>Could not found movie! Search again!</h1> : null}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    console.log(state)\r\n    return {\r\n        movie: state.movie,\r\n        isLoaded: state.isLoaded,\r\n        isMovieFound: state.movieFound\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        getMovie: (movie) => dispatch(getMovie(movie)),\r\n        isMovieLoaded: (bool) => dispatch(isMovieLoaded(bool)),\r\n        movieFound: (bool) => dispatch(movieFound(bool))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Input)\r\n","export function getMovie(movie) {\r\n    return {\r\n        type: \"GET_MOVIE\",\r\n        payload: movie\r\n    }\r\n}\r\n\r\nexport function isMovieLoaded(bool) {\r\n    return {\r\n        type: \"MOVIE_IS_LOADED\",\r\n        payload: bool\r\n    }\r\n}\r\nexport function movieFound(bool) {\r\n    return {\r\n        type: \"MOVIE_FOUND\",\r\n        payload: bool\r\n    }\r\n}\r\n\r\nexport function categorySelected(cat) {\r\n    return {\r\n        type: \"CATEGORY_SELECTED\",\r\n        payload: cat\r\n    }\r\n}","import React from 'react'\r\nimport './MovieTitle.css'\r\nimport {connect} from 'react-redux'\r\n\r\nconst MovieTitle = (props) => {\r\n    return (\r\n        <div className=\"mvt-div\">\r\n            <h1 className=\"mvt-h1\">{props.movie.title}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        movie: state.movie,\r\n        isLoaded: state.isLoaded\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(MovieTitle)\r\n","import React from 'react'\r\nimport './MovieInfo.css'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction MovieInfo(props) {\r\n    var movie = props.movie\r\n    return (\r\n        <div className=\"mvi-div\">\r\n        {props.isLoaded ? \r\n            <ul>\r\n                <li>\r\n                    Title: <span>{movie.title}</span>\r\n                </li>\r\n                <li>\r\n                    Year: <span>{movie.year}</span>\r\n                </li>\r\n                <li>\r\n                    Length: <span>{movie.length}</span>\r\n                </li>\r\n                <li>\r\n                    IMBD Rating: <span>{movie.rating}</span>\r\n                </li>\r\n                <li>\r\n                    IMBD Votes: <span>{movie.rating_votes}</span>\r\n                </li>\r\n            </ul>\r\n            : <p>Search for a movie</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        movie: state.movie,\r\n        isLoaded: state.isLoaded\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(MovieInfo)\r\n","import React from 'react'\r\nimport './MovieImage.css'\r\n\r\nfunction MovieImage(props) {\r\n    return (\r\n        <div className=\"mi-div\">\r\n            <img src={props.image} alt=\"poster\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieImage\r\n","import React from 'react'\r\nimport './LeftSide.css'\r\nimport MovieImage from '../MovieImage/MovieImage'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nfunction LeftSide(props) {\r\n    if (props.isLoaded) {\r\n        var link = props.movie.trailer.link\r\n    }\r\n    return (\r\n        <div className=\"ls-div\">\r\n            {props.isLoaded ?\r\n                <>\r\n                    <MovieImage image={props.movie.poster} isLoaded={props.isLoaded} movieFound={props.movieFound} />\r\n                    {link.length !== 0 ?\r\n                    <a href={link} target=\"_blank\"\r\n                        rel=\"noopener noreferrer\">\r\n                        Watch trailer on imbd</a>\r\n                        : null}\r\n                </>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        movie: state.movie,\r\n        isLoaded: state.isLoaded,\r\n        movieFound: state.movieFound\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(LeftSide)\r\n","import React from 'react'\r\nimport './Header.css'\r\nimport {connect } from 'react-redux'\r\nimport {categorySelected} from '../../redux/actions/actions'\r\n\r\nclass Header extends React.Component {\r\n    plotClicked = () => {\r\n        this.props.categorySelected('plot')\r\n    }\r\n\r\n    castClicked = () => {\r\n        this.props.categorySelected('cast')\r\n    }\r\n\r\n    specsClicked = () => {\r\n        this.props.categorySelected('specs')\r\n    }\r\n\r\n    render() {\r\n        var category = this.props.category\r\n        console.log(category)\r\n        return (\r\n            <nav className=\"header-main\">\r\n                <ul>\r\n                    <li className={category === 'plot' ? 'header-main-li active' : 'header-main-li'} \r\n                    onClick={this.plotClicked}>Plot</li>\r\n                    <li className={category === 'cast' ? 'header-main-li active' : 'header-main-li'} \r\n                    onClick={this.castClicked}>Cast</li>\r\n                    <li className={category === 'specs' ? 'header-main-li active' : 'header-main-li'} \r\n                    onClick={this.specsClicked}>Technical Specs</li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        category: state.categorySelected\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        categorySelected: (cat) => dispatch(categorySelected(cat))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\r\n","import React from 'react'\r\nimport './Plot.css'\r\n\r\nfunction Plot(props) {\r\n    return (\r\n        <div className=\"plot-div\">\r\n                <p>{props.plot}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Plot\r\n","import React from 'react'\r\nimport './Cast.css'\r\n\r\nfunction Cast(props) {\r\n    if(props.isLoaded) {\r\n        var cast = props.cast\r\n        var actors = cast.map((actor, i) => {\r\n            return (\r\n                <tr key={actor + i}>\r\n                    <td>{actor.actor}</td>\r\n                    <td>{actor.character}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"cast-div\">\r\n           <table className=\"cast-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Actor</th>\r\n                        <th>Character</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {actors}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cast\r\n","import React from 'react'\r\nimport './TechnicalSpecs.css'\r\n\r\nfunction TechnicalSpecs(props) {\r\n    if (props.isLoaded) {\r\n        var tech = props.tech\r\n        var specs = [];\r\n        var item;\r\n        for (var i = 0; i < tech.length; i++) {\r\n            item = <div className='spec-div'>\r\n                <p className=\"first-p\">{tech[i][0]} </p>\r\n                <p className=\"second-p\">{tech[i][1]}</p>\r\n            </div>\r\n            specs.push(item)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"ts-div\">\r\n            { specs }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TechnicalSpecs\r\n","import React from 'react'\r\nimport './RightSide.css'\r\nimport Header from '../RightSideHeader/Header'\r\nimport Plot from '../Plot/Plot'\r\nimport Cast from '../Cast/Cast'\r\nimport TechnicalSpecs from '../TechnicalSpecs/TechnicalSpecs'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction RightSide(props) {\r\n    var render = (categorySelected) => {\r\n        switch (categorySelected) {\r\n            case \"plot\": {\r\n                return <Plot plot={props.movie.plot} movieFound={props.movieFound} />\r\n            }\r\n            case \"cast\": {\r\n                return <Cast cast={props.movie.cast} isLoaded={props.isLoaded} />\r\n            }\r\n            case \"specs\": {\r\n                return <TechnicalSpecs tech={props.movie.technical_specs} isLoaded={props.isLoaded} />\r\n            }\r\n            default: {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"rs-div\">\r\n            <Header />\r\n            {render(props.categorySelected)}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToPros(state) {\r\n    return {\r\n        movie: state.movie,\r\n        isLoaded: state.isLoaded,\r\n        movieFound: state.movieFound,\r\n        categorySelected: state.categorySelected\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToPros)(RightSide)\r\n","import React from 'react'\r\nimport './Content.css'\r\nimport LeftSide from '../../components/LeftSide/LeftSide'\r\nimport RightSide from '../../components/RightSide/RightSide'\r\n\r\nfunction Content() {\r\n    return (\r\n        <div className=\"content-div\">\r\n            <LeftSide/>\r\n            <RightSide/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\r\nimport './MainLayout.css'\r\nimport Input from '../../components/Input/Input'\r\nimport MovieTitle from '../../components/MovieTitle/MovieTitle'\r\nimport MovieInfo from '../../components/MovieInfo/MovieInfo'\r\nimport Content from '../Content/Content'\r\nimport { connect } from 'react-redux'\r\n// import Welcome from '../../components/Welcome/Welcome'\r\n\r\nclass MainLayout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main-layout\">\r\n                {!this.props.isLoaded ? <Input /> :\r\n                    <>\r\n                            <Input />\r\n                            <MovieTitle />\r\n                            <MovieInfo />\r\n                            <Content />  \r\n                    </>}\r\n     \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isLoaded: state.isLoaded\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MainLayout)\r\n\r\n","import React from 'react';\nimport './App.css';\nimport MainLayout from './containers/MainLayout/MainLayout'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainLayout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    isLoaded: false, \r\n    movieFound: true,\r\n    movie: {},\r\n    categorySelected: 'plot'\r\n}\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch(action.type) {\r\n        case \"GET_MOVIE\": {\r\n            return {...state, movie: action.payload}\r\n        }\r\n        case \"MOVIE_IS_LOADED\": {\r\n            return {...state, isLoaded: action.payload}\r\n        }\r\n        case \"MOVIE_FOUND\": {\r\n            return {...state, movieFound: action.payload}\r\n        }\r\n        case \"CATEGORY_SELECTED\": {\r\n            return {...state, categorySelected: action.payload}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer","import {createStore} from 'redux'\r\n\r\nimport reducer  from './reducers/reducer'\r\n\r\nconst store = createStore(reducer)\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}